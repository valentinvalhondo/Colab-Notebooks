{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MLCC: Linear Regression with Synthetic Data","provenance":[],"authorship_tag":"ABX9TyO/XY7xx4LjKkhAa2QpPYsl"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"SH1vqDz1RZmg","executionInfo":{"status":"ok","timestamp":1601055630374,"user_tz":-60,"elapsed":1292,"user":{"displayName":"Valentin Valhondo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvBrEgqCPSmi0Chnrx9uSHaP40hGnvfeUVA_7bmg=s64","userId":"09584914059744737936"}}},"source":["# Run this Colab on TensorFlow 2.x\n","%tensorflow_version 2.x"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"DzDrW2CRWjJb","executionInfo":{"status":"ok","timestamp":1601055637869,"user_tz":-60,"elapsed":2589,"user":{"displayName":"Valentin Valhondo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvBrEgqCPSmi0Chnrx9uSHaP40hGnvfeUVA_7bmg=s64","userId":"09584914059744737936"}}},"source":["import pandas as pd\n","import tensorflow as tf\n","from matplotlib import pyplot as plt"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"c1ACJmYhWog1"},"source":["## Define functions that build and train a model\n","\n","The following code defines two functions:\n","\n","  * `build_model(my_learning_rate)`, which builds an empty model.\n","  * `train_model(model, feature, label, epochs)`, which trains the model from the examples (feature and label) you pass. "]},{"cell_type":"code","metadata":{"id":"whEsmcFMXODP","executionInfo":{"status":"ok","timestamp":1601056381010,"user_tz":-60,"elapsed":683,"user":{"displayName":"Valentin Valhondo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvBrEgqCPSmi0Chnrx9uSHaP40hGnvfeUVA_7bmg=s64","userId":"09584914059744737936"}},"outputId":"51b7b217-ad48-41c5-d8af-2ab589a59c1b","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Define the functions that build and train a model\n","def build_model(my_learning_rate):\n","  \"\"\"Create and compile a simple linear regression model.\"\"\"\n","  # Most simple tf.keras models are sequential. \n","  # A sequential model contains one or more layers.\n","  model = tf.keras.models.Sequential()\n","\n","  # Describe the topography of the model.\n","  # The topography of a simple linear regression model\n","  # is a single node in a single layer. \n","  model.add(tf.keras.layers.Dense(units=1, \n","                                  input_shape=(1,)))\n","\n","  # Compile the model topography into code that \n","  # TensorFlow can efficiently execute. Configure \n","  # training to minimize the model's mean squared error. \n","  model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=my_learning_rate),\n","                loss=\"mean_squared_error\",\n","                metrics=[tf.keras.metrics.RootMeanSquaredError()])\n","\n","  return model           \n","\n","\n","def train_model(model, feature, label, epochs, batch_size):\n","  \"\"\"Train the model by feeding it data.\"\"\"\n","\n","  # Feed the feature values and the label values to the \n","  # model. The model will train for the specified number \n","  # of epochs, gradually learning how the feature values\n","  # relate to the label values. \n","  history = model.fit(x=feature,\n","                      y=label,\n","                      batch_size=batch_size,\n","                      epochs=epochs)\n","\n","  # Gather the trained model's weight and bias.\n","  trained_weight = model.get_weights()[0]\n","  trained_bias = model.get_weights()[1]\n","\n","  # The list of epochs is stored separately from the \n","  # rest of history.\n","  epochs = history.epoch\n","  \n","  # Gather the history (a snapshot) of each epoch.\n","  hist = pd.DataFrame(history.history)\n","\n","  # Specifically gather the model's root mean \n","  #squared error at each epoch. \n","  rmse = hist[\"root_mean_squared_error\"]\n","\n","  return trained_weight, trained_bias, epochs, rmse\n","\n","print(\"Defined create_model and train_model\")"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Defined create_model and train_model\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"f20-l213XZIm","executionInfo":{"status":"ok","timestamp":1601055887513,"user_tz":-60,"elapsed":705,"user":{"displayName":"Valentin Valhondo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvBrEgqCPSmi0Chnrx9uSHaP40hGnvfeUVA_7bmg=s64","userId":"09584914059744737936"}},"outputId":"62a15e83-93c4-4024-fcf2-e337a4588647","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Define the plotting functions\n","def plot_the_model(trained_weight, trained_bias, feature, label):\n","  \"\"\"Plot the trained model against the training feature and label.\"\"\"\n","\n","  # Label the axes.\n","  plt.xlabel(\"feature\")\n","  plt.ylabel(\"label\")\n","\n","  # Plot the feature values vs. label values.\n","  plt.scatter(feature, label)\n","\n","  # Create a red line representing the model. The red line starts\n","  # at coordinates (x0, y0) and ends at coordinates (x1, y1).\n","  x0 = 0\n","  y0 = trained_bias\n","  x1 = my_feature[-1]\n","  y1 = trained_bias + (trained_weight * x1)\n","  plt.plot([x0, x1], [y0, y1], c='r')\n","\n","  # Render the scatter plot and the red line.\n","  plt.show()\n","\n","def plot_the_loss_curve(epochs, rmse):\n","  \"\"\"Plot the loss curve, which shows loss vs. epoch.\"\"\"\n","\n","  plt.figure()\n","  plt.xlabel(\"Epoch\")\n","  plt.ylabel(\"Root Mean Squared Error\")\n","\n","  plt.plot(epochs, rmse, label=\"Loss\")\n","  plt.legend()\n","  plt.ylim([rmse.min()*0.97, rmse.max()])\n","  plt.show()\n","\n","print(\"Defined the plot_the_model and plot_the_loss_curve functions.\")"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Defined the plot_the_model and plot_the_loss_curve functions.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KwHtopBnXlE1","executionInfo":{"status":"ok","timestamp":1601055911279,"user_tz":-60,"elapsed":646,"user":{"displayName":"Valentin Valhondo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvBrEgqCPSmi0Chnrx9uSHaP40hGnvfeUVA_7bmg=s64","userId":"09584914059744737936"}}},"source":["# Dataset\n","my_feature = ([1.0, 2.0,  3.0,  4.0,  5.0,  6.0,  7.0,  8.0,  9.0, 10.0, 11.0, 12.0])\n","my_label   = ([5.0, 8.8,  9.6, 14.2, 18.8, 19.5, 21.4, 26.8, 28.9, 32.0, 33.8, 38.2])"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"9HQ-6TxtXp09","executionInfo":{"status":"ok","timestamp":1601056559424,"user_tz":-60,"elapsed":667,"user":{"displayName":"Valentin Valhondo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvBrEgqCPSmi0Chnrx9uSHaP40hGnvfeUVA_7bmg=s64","userId":"09584914059744737936"}},"outputId":"89ba66f2-21dc-45de-bd0e-c1b8bd5b4f14","colab":{"base_uri":"https://localhost:8080/","height":283}},"source":["# Manual guess of best model. Weight 3, Bias 1\n","plot_the_model(3,2,my_feature,my_label)"],"execution_count":37,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"UkArVGzjYKc4","executionInfo":{"status":"ok","timestamp":1601057075572,"user_tz":-60,"elapsed":5293,"user":{"displayName":"Valentin Valhondo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvBrEgqCPSmi0Chnrx9uSHaP40hGnvfeUVA_7bmg=s64","userId":"09584914059744737936"}},"outputId":"11a0a15f-4414-42d7-e122-23ca6fdfa670","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learning_rate=0.05\n","epochs=125\n","my_batch_size=1\n","\n","my_model = build_model(learning_rate)\n","trained_weight, trained_bias, epochs, rmse = train_model(my_model, my_feature, \n","                                                         my_label, epochs,\n","                                                         my_batch_size)\n","plot_the_model(trained_weight, trained_bias, my_feature, my_label)\n","plot_the_loss_curve(epochs, rmse)\n","print(trained_weight, trained_bias)"],"execution_count":49,"outputs":[{"output_type":"stream","text":["Epoch 1/125\n","12/12 [==============================] - 0s 1ms/step - loss: 55.3060 - root_mean_squared_error: 7.4368\n","Epoch 2/125\n","12/12 [==============================] - 0s 1ms/step - loss: 13.2765 - root_mean_squared_error: 3.6437\n","Epoch 3/125\n","12/12 [==============================] - 0s 992us/step - loss: 2.7889 - root_mean_squared_error: 1.6700\n","Epoch 4/125\n","12/12 [==============================] - 0s 920us/step - loss: 1.1814 - root_mean_squared_error: 1.0869\n","Epoch 5/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1786 - root_mean_squared_error: 1.0856\n","Epoch 6/125\n","12/12 [==============================] - 0s 943us/step - loss: 1.0255 - root_mean_squared_error: 1.0127\n","Epoch 7/125\n","12/12 [==============================] - 0s 975us/step - loss: 1.4096 - root_mean_squared_error: 1.1873\n","Epoch 8/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0917 - root_mean_squared_error: 1.0449\n","Epoch 9/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1994 - root_mean_squared_error: 1.0952\n","Epoch 10/125\n","12/12 [==============================] - 0s 977us/step - loss: 1.2360 - root_mean_squared_error: 1.1117\n","Epoch 11/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2105 - root_mean_squared_error: 1.1002\n","Epoch 12/125\n","12/12 [==============================] - 0s 1ms/step - loss: 0.9228 - root_mean_squared_error: 0.9606\n","Epoch 13/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.4055 - root_mean_squared_error: 1.1856\n","Epoch 14/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1876 - root_mean_squared_error: 1.0898\n","Epoch 15/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1136 - root_mean_squared_error: 1.0553\n","Epoch 16/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1210 - root_mean_squared_error: 1.0588\n","Epoch 17/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2802 - root_mean_squared_error: 1.1315\n","Epoch 18/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1163 - root_mean_squared_error: 1.0565\n","Epoch 19/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0423 - root_mean_squared_error: 1.0209\n","Epoch 20/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2601 - root_mean_squared_error: 1.1225\n","Epoch 21/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1316 - root_mean_squared_error: 1.0638\n","Epoch 22/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2761 - root_mean_squared_error: 1.1296\n","Epoch 23/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1349 - root_mean_squared_error: 1.0653\n","Epoch 24/125\n","12/12 [==============================] - 0s 2ms/step - loss: 1.0340 - root_mean_squared_error: 1.0168\n","Epoch 25/125\n","12/12 [==============================] - 0s 906us/step - loss: 1.2972 - root_mean_squared_error: 1.1389\n","Epoch 26/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0430 - root_mean_squared_error: 1.0213\n","Epoch 27/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1548 - root_mean_squared_error: 1.0746\n","Epoch 28/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2067 - root_mean_squared_error: 1.0985\n","Epoch 29/125\n","12/12 [==============================] - 0s 981us/step - loss: 1.0913 - root_mean_squared_error: 1.0447\n","Epoch 30/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2323 - root_mean_squared_error: 1.1101\n","Epoch 31/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2086 - root_mean_squared_error: 1.0994\n","Epoch 32/125\n","12/12 [==============================] - 0s 965us/step - loss: 1.0253 - root_mean_squared_error: 1.0126\n","Epoch 33/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2379 - root_mean_squared_error: 1.1126\n","Epoch 34/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0513 - root_mean_squared_error: 1.0253\n","Epoch 35/125\n","12/12 [==============================] - 0s 1ms/step - loss: 0.9048 - root_mean_squared_error: 0.9512\n","Epoch 36/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1084 - root_mean_squared_error: 1.0528\n","Epoch 37/125\n","12/12 [==============================] - 0s 979us/step - loss: 1.2563 - root_mean_squared_error: 1.1208\n","Epoch 38/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0917 - root_mean_squared_error: 1.0448\n","Epoch 39/125\n","12/12 [==============================] - 0s 1ms/step - loss: 0.9775 - root_mean_squared_error: 0.9887\n","Epoch 40/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.3499 - root_mean_squared_error: 1.1619\n","Epoch 41/125\n","12/12 [==============================] - 0s 1ms/step - loss: 0.9732 - root_mean_squared_error: 0.9865\n","Epoch 42/125\n","12/12 [==============================] - 0s 985us/step - loss: 1.2379 - root_mean_squared_error: 1.1126\n","Epoch 43/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1845 - root_mean_squared_error: 1.0883\n","Epoch 44/125\n","12/12 [==============================] - 0s 956us/step - loss: 1.1562 - root_mean_squared_error: 1.0753\n","Epoch 45/125\n","12/12 [==============================] - 0s 937us/step - loss: 1.1602 - root_mean_squared_error: 1.0771\n","Epoch 46/125\n","12/12 [==============================] - 0s 995us/step - loss: 1.2355 - root_mean_squared_error: 1.1115\n","Epoch 47/125\n","12/12 [==============================] - 0s 952us/step - loss: 1.1830 - root_mean_squared_error: 1.0876\n","Epoch 48/125\n","12/12 [==============================] - 0s 960us/step - loss: 1.0204 - root_mean_squared_error: 1.0101\n","Epoch 49/125\n","12/12 [==============================] - 0s 986us/step - loss: 1.2735 - root_mean_squared_error: 1.1285\n","Epoch 50/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1525 - root_mean_squared_error: 1.0735\n","Epoch 51/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1613 - root_mean_squared_error: 1.0776\n","Epoch 52/125\n","12/12 [==============================] - 0s 947us/step - loss: 1.0396 - root_mean_squared_error: 1.0196\n","Epoch 53/125\n","12/12 [==============================] - 0s 935us/step - loss: 1.1109 - root_mean_squared_error: 1.0540\n","Epoch 54/125\n","12/12 [==============================] - 0s 998us/step - loss: 0.9804 - root_mean_squared_error: 0.9901\n","Epoch 55/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0699 - root_mean_squared_error: 1.0343\n","Epoch 56/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0059 - root_mean_squared_error: 1.0030\n","Epoch 57/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2504 - root_mean_squared_error: 1.1182\n","Epoch 58/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1024 - root_mean_squared_error: 1.0500\n","Epoch 59/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1230 - root_mean_squared_error: 1.0597\n","Epoch 60/125\n","12/12 [==============================] - 0s 999us/step - loss: 1.1593 - root_mean_squared_error: 1.0767\n","Epoch 61/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2197 - root_mean_squared_error: 1.1044\n","Epoch 62/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0109 - root_mean_squared_error: 1.0054\n","Epoch 63/125\n","12/12 [==============================] - 0s 944us/step - loss: 1.2263 - root_mean_squared_error: 1.1074\n","Epoch 64/125\n","12/12 [==============================] - 0s 937us/step - loss: 1.1484 - root_mean_squared_error: 1.0716\n","Epoch 65/125\n","12/12 [==============================] - 0s 963us/step - loss: 1.1781 - root_mean_squared_error: 1.0854\n","Epoch 66/125\n","12/12 [==============================] - 0s 958us/step - loss: 0.8141 - root_mean_squared_error: 0.9023\n","Epoch 67/125\n","12/12 [==============================] - 0s 950us/step - loss: 1.4220 - root_mean_squared_error: 1.1925\n","Epoch 68/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2012 - root_mean_squared_error: 1.0960\n","Epoch 69/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1614 - root_mean_squared_error: 1.0777\n","Epoch 70/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0698 - root_mean_squared_error: 1.0343\n","Epoch 71/125\n","12/12 [==============================] - 0s 920us/step - loss: 1.0046 - root_mean_squared_error: 1.0023\n","Epoch 72/125\n","12/12 [==============================] - 0s 949us/step - loss: 0.8924 - root_mean_squared_error: 0.9447\n","Epoch 73/125\n","12/12 [==============================] - 0s 923us/step - loss: 1.3272 - root_mean_squared_error: 1.1520\n","Epoch 74/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2324 - root_mean_squared_error: 1.1101\n","Epoch 75/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2341 - root_mean_squared_error: 1.1109\n","Epoch 76/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1396 - root_mean_squared_error: 1.0675\n","Epoch 77/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.3007 - root_mean_squared_error: 1.1405\n","Epoch 78/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1086 - root_mean_squared_error: 1.0529\n","Epoch 79/125\n","12/12 [==============================] - 0s 1ms/step - loss: 0.7571 - root_mean_squared_error: 0.8701\n","Epoch 80/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1302 - root_mean_squared_error: 1.0631\n","Epoch 81/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2120 - root_mean_squared_error: 1.1009\n","Epoch 82/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1750 - root_mean_squared_error: 1.0840\n","Epoch 83/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1023 - root_mean_squared_error: 1.0499\n","Epoch 84/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2115 - root_mean_squared_error: 1.1007\n","Epoch 85/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1758 - root_mean_squared_error: 1.0844\n","Epoch 86/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0819 - root_mean_squared_error: 1.0401\n","Epoch 87/125\n","12/12 [==============================] - 0s 970us/step - loss: 1.2552 - root_mean_squared_error: 1.1203\n","Epoch 88/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0232 - root_mean_squared_error: 1.0115\n","Epoch 89/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2172 - root_mean_squared_error: 1.1033\n","Epoch 90/125\n","12/12 [==============================] - 0s 1ms/step - loss: 0.9882 - root_mean_squared_error: 0.9941\n","Epoch 91/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0660 - root_mean_squared_error: 1.0325\n","Epoch 92/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2396 - root_mean_squared_error: 1.1134\n","Epoch 93/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1157 - root_mean_squared_error: 1.0562\n","Epoch 94/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2459 - root_mean_squared_error: 1.1162\n","Epoch 95/125\n","12/12 [==============================] - 0s 1ms/step - loss: 0.9451 - root_mean_squared_error: 0.9722\n","Epoch 96/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2930 - root_mean_squared_error: 1.1371\n","Epoch 97/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1011 - root_mean_squared_error: 1.0493\n","Epoch 98/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1918 - root_mean_squared_error: 1.0917\n","Epoch 99/125\n","12/12 [==============================] - 0s 2ms/step - loss: 1.0496 - root_mean_squared_error: 1.0245\n","Epoch 100/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1841 - root_mean_squared_error: 1.0882\n","Epoch 101/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1817 - root_mean_squared_error: 1.0870\n","Epoch 102/125\n","12/12 [==============================] - 0s 982us/step - loss: 1.2675 - root_mean_squared_error: 1.1258\n","Epoch 103/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1362 - root_mean_squared_error: 1.0659\n","Epoch 104/125\n","12/12 [==============================] - 0s 979us/step - loss: 0.8351 - root_mean_squared_error: 0.9139\n","Epoch 105/125\n","12/12 [==============================] - 0s 941us/step - loss: 1.1834 - root_mean_squared_error: 1.0878\n","Epoch 106/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.3085 - root_mean_squared_error: 1.1439\n","Epoch 107/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1570 - root_mean_squared_error: 1.0756\n","Epoch 108/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1440 - root_mean_squared_error: 1.0696\n","Epoch 109/125\n","12/12 [==============================] - 0s 1ms/step - loss: 0.9533 - root_mean_squared_error: 0.9764\n","Epoch 110/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2544 - root_mean_squared_error: 1.1200\n","Epoch 111/125\n","12/12 [==============================] - 0s 877us/step - loss: 1.2282 - root_mean_squared_error: 1.1082\n","Epoch 112/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.0296 - root_mean_squared_error: 1.0147\n","Epoch 113/125\n","12/12 [==============================] - 0s 945us/step - loss: 0.8953 - root_mean_squared_error: 0.9462\n","Epoch 114/125\n","12/12 [==============================] - 0s 920us/step - loss: 1.2576 - root_mean_squared_error: 1.1214\n","Epoch 115/125\n","12/12 [==============================] - 0s 940us/step - loss: 1.1781 - root_mean_squared_error: 1.0854\n","Epoch 116/125\n","12/12 [==============================] - 0s 908us/step - loss: 0.9420 - root_mean_squared_error: 0.9705\n","Epoch 117/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1363 - root_mean_squared_error: 1.0660\n","Epoch 118/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2712 - root_mean_squared_error: 1.1275\n","Epoch 119/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1647 - root_mean_squared_error: 1.0792\n","Epoch 120/125\n","12/12 [==============================] - 0s 954us/step - loss: 0.9159 - root_mean_squared_error: 0.9570\n","Epoch 121/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1705 - root_mean_squared_error: 1.0819\n","Epoch 122/125\n","12/12 [==============================] - 0s 928us/step - loss: 1.2430 - root_mean_squared_error: 1.1149\n","Epoch 123/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1800 - root_mean_squared_error: 1.0863\n","Epoch 124/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.1969 - root_mean_squared_error: 1.0940\n","Epoch 125/125\n","12/12 [==============================] - 0s 1ms/step - loss: 1.2091 - root_mean_squared_error: 1.0996\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["[[3.0072832]] [2.208454]\n"],"name":"stdout"}]}]}